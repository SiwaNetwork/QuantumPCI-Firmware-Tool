package main

import (
	"flag"
	"fmt"

	h "github.com/opencomputeproject/quantum-pci-ft/header"
	log "github.com/sirupsen/logrus"
)

// printHeader –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥–æ–ª–æ–≤–∫–µ –ø—Ä–æ—à–∏–≤–∫–∏
func printHeader(hdr *h.Header) {
	fmt.Println("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥–æ–ª–æ–≤–∫–µ:")
	fmt.Printf("PCI Vendor ID: 0x%04x\n", hdr.VendorId)
	fmt.Printf("PCI Device ID: 0x%04x\n", hdr.DeviceId)
	fmt.Printf("PCI HW Revision ID: 0x%04x\n", hdr.HardwareRevision)
	fmt.Printf("CRC16 –æ–±—Ä–∞–∑–∞: 0x%04x\n", hdr.CRC)
	fmt.Printf("–†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞: %d –±–∞–π—Ç\n", hdr.ImageSize)
}

func main() {
	fmt.Println("Quantum PCI FT - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—à–∏–≤–∫–∞–º–∏ PCI —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
	fmt.Println("===========================================================")
	
	c := &h.Config{}

	// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	flag.BoolVar(&c.Apply, "apply", false, "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≤ –Ω–∞—á–∞–ª–µ")
	flag.StringVar(&c.InputPath, "input", "", "–ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –ø—Ä–æ—à–∏–≤–∫–∏")
	flag.StringVar(&c.OutputPath, "output", "", "–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–æ—à–∏–≤–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω)")
	flag.IntVar(&c.VendorId, "vendor", 0, "PCI VEN_ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫")
	flag.IntVar(&c.DeviceId, "device", 0, "PCI DEV_ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫")
	flag.IntVar(&c.HardwareRevision, "hw", 0, "PCI REV_ID (—Ä–µ–≤–∏–∑–∏—è –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫")
	flag.Parse()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	if err := h.CheckConfig(c); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ", err)
	}

	// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤
	if err := h.OpenFiles(c); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤: ", err)
	}
	defer h.CloseFiles(c)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	oldHdr, err := h.ReadHeader(c)
	if err == nil {
		fmt.Println("\n–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
		printHeader(oldHdr)
		if c.Apply {
			fmt.Println("\n‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—Ä–∞–∑–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
		}
	}

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	hdr, err := h.PrepareHeader(c)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: ", err)
	}

	// –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
	if err := h.WriteHeader(c, hdr); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞: ", err)
	}

	// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ CRC –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	hdr.CRC, err = h.CalcCRC(c)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è CRC: ", err)
	}

	// –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–º CRC
	if err := h.WriteHeader(c, hdr); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å CRC: ", err)
	}

	fmt.Println("\n–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:")
	printHeader(hdr)
	
	if c.Apply {
		fmt.Printf("\n‚úÖ –§–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: %s\n", c.OutputPath)
	} else {
		fmt.Println("\nüìã –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ -apply –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞)")
	}
}
